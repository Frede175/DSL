grammar dk.sdu.mmmi.Typescriptdsl with org.eclipse.xtext.common.Terminals

generate typescriptdsl "http://www.sdu.dk/mmmi/Typescriptdsl"

Model:
	modules += Module*
	database = Database
;


Database:
	'database' name=ID ('uses' modules += ModuleRefernce (',' modules += ModuleRefernce)*)? ':'
		config += Config*
		tables += Table+
;

Module:
	'module' ModuleID ('uses' modules += ModuleRefernce (',' modules += ModuleRefernce)*)? ':'
		tables += Table+
;

ModuleRefernce hidden():
	module=[Module]('<' type=[Table] '>')?
;

ModuleID returns Module hidden():
	name=ID(type=GenericTable)?
;

GenericTable returns ITable hidden():
	{ModuleParameter} '<'name=ID'>'
;

Config returns Config:
	{ConfigProvider} 'provider' value=STRING | // Database type
	{ConfigUrl} 'url' value=STRING |
	{ConfigPort} 'port' value=INT |
	{ConfigUsername} 'username' value=STRING |
	{ConfigPassword} 'password' value=STRING
;

Table returns ITable:
	{Table} 'table' name=ID ('extends' superType=[Table])? ':'
		attributes += Attribute+
;

Attribute:
	name=ID ':' type=AttributeType (many?='*')? (optional?='?')? (primary?='primary')? 
		('constraint'  constraint=OrConstraint)?
;

OrConstraint returns Constraint:
	AndConstraint ({Or.left=current} '||' right=AndConstraint)*
;

AndConstraint: 
	PrimaryConstraint ({And.left=current} '&&' right=PrimaryConstraint)*
;

PrimaryConstraint: 		 
 	{RegexConstraint} value=STRING |
 	{CompareConstraint} left=Expression operator=Operators right=Expression
;

Operators: 
	'>' |
	'>=' |
	'<' |
	'<=' |
	'='
;

Expression returns Expression:
	Factor (({Plus.left=current} '+' | {Minus.left=current} '-')  right=Factor)*
;

Factor returns Expression:
	Primary (({Mult.left=current} '*' | {Div.left=current} '/')  right=Primary)*
;

Primary returns Expression:
	NumberExp | Field | Parenthesis
;

Parenthesis:
	'(' exp=Expression ')'
;

Field:
	attr=[Attribute]
;

NumberExp:
	value=INT
;


AttributeType returns AttributeType:
	PrimaryType | TableType
;

PrimaryType returns PrimaryType:
	{IntType}'int' | {StringType} 'string' | {DateType} 'date' 
;

TableType returns TableType:
	table=[ITable]
;
